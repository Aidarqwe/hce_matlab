clear;
clc;

N = 20; % разрешение сетки
L = 0.1; % размер пластины (м)
h = L / N; % размер ячейки сетки (м)

x = linspace(0, L, N);
y = linspace(0, L, N);

[X, Y] = meshgrid(x, y);

% Начальные условия
T0 = 300; % начальная температура (К)
T = T0 * ones(size(X)); % инициализация всей пластины

% Параметры временного шага
t = 0; % начальное время (с)
tmax = 60; % конечное время моделирования (с)
Nt = 5000; % количество временных шагов
tau = (tmax - t) / Nt; % временной шаг (с)

% Граничные условия
Tb = 300; % температура на нижней границе (К)
T(1, :) = Tb; % задание температуры на нижней границе

% Свойства материала
rho = 7800; % плотность (кг/м^3)
cp = 460; % удельная теплоемкость (Дж/кг·К)
k = 46; % теплопроводность (Вт/м·К)

% Параметры конвекции и излучения
h_c = 5; % коэффициент теплопередачи (Вт/м^2·К)
T_ref = 300; % температура окружающей среды (К)
epsilon = 0.8; % коэффициент излучательной способности
sigma = 5.67e-8; % постоянная Стефана-Больцмана (Вт/м^2·К^4)

% Интенсивность лазера
q_laser = 1000; % мощность лазера (Вт/м^2)

% Коэффициенты для метода Томаса
A = @(T) k / (rho * cp * h^2) * tau;
a = -A(T0) * ones(N-2, 1);
b = (1 + 2 * A(T0)) * ones(N-2, 1);
c = -A(T0) * ones(N-2, 1);

% Цикл по времени
while t < tmax
    Tprev = T;  % сохранение предыдущего распределения температур
    
    % Обновление температуры по горизонтали
    for iy = 2:N-1
        d = Tprev(iy, 2:N-1);
        d(1) = d(1) + A(T(iy, 1)) * T(iy, 1);  % левая граница (теплоизоляция)
        d(end) = d(end) + A(T(iy, end)) * T(iy, end); % правая граница (теплоизоляция)

        T(iy, 2:N-1) = thomas_algorithm(a, b, c, d);
    end

    % Обновление температуры по вертикали
    for ix = 2:N-1
        d = Tprev(2:N-1, ix);
        d(1) = d(1) + A(T(1, ix)) * T(1, ix);  % нижняя граница (Дирихле)
        
        % Верхняя граница: конвекция, излучение и лазер
        q_conv = h_c * (Tprev(end, ix) - T_ref);
        q_rad = epsilon * sigma * (Tprev(end, ix)^4 - T_ref^4);
        d(end) = d(end) + A(T(end, ix)) * (q_conv + q_rad + q_laser);

        T(2:N-1, ix) = thomas_algorithm(a, b, c, d);
    end
    
    % Повторное применение граничных условий
    T(1, :) = Tb;   % фиксированная температура на нижней границе
    T(:, end) = T(:, end-1); % правая граница (теплоизоляция)
    T(:, 1) = T(:, 2);       % левая граница (теплоизоляция)
    T(end, :) = T(end-1, :); % верхняя граница (теплоизоляция)

    % Визуализация
    contourf(X, Y, T, 20, 'EdgeColor', 'none');
    caxis([T0 max(T(:))]);  % фиксирование цветовой шкалы
    xlabel('x, м');
    ylabel('y, м');
    title(sprintf('Температура пластины, К, t = %.2f с', t));
    colorbar;
    drawnow;
    
    % Обновление времени
    t = t + tau;
end

% Функция для решения трёхдиагональной системы методом Томаса
function x = thomas_algorithm(a, b, c, d)
    N = length(b);
    for i = 2:N
        w = a(i-1) / b(i-1);
        b(i) = b(i) - w * c(i-1);
        d(i) = d(i) - w * d(i-1);
    end
    x = zeros(N, 1);
    x(N) = d(N) / b(N);
    for i = N-1:-1:1
        x(i) = (d(i) - c(i) * x(i+1)) / b(i);
    end
end
